//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using ET;

namespace cfg
{
   
    [LubanConfig]
    public partial class ItemConfigCategory: LubanConfigSingleton<ItemConfigCategory>
    {
        private readonly Dictionary<int, ItemConfig> _dataMap;
        private readonly List<ItemConfig> _dataList;
        
        public ItemConfigCategory(ByteBuf _buf)
        {
            _dataMap = new Dictionary<int, ItemConfig>();
            _dataList = new List<ItemConfig>();
            
            for(int n = _buf.ReadSize() ; n > 0 ; --n)
            {
                ItemConfig _v;
                _v = ItemConfig.DeserializeItemConfig(_buf);
                _dataList.Add(_v);
                _dataMap.Add(_v.Id, _v);
            }
            PostInit();
        }
        
        public ItemConfigCategory()
        {
            throw new System.NotImplementedException();
        }

        public Dictionary<int, ItemConfig> GetAll()
        {
            return _dataMap;
        }
        
        public List<ItemConfig> DataList => _dataList;

        public ItemConfig GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
        public ItemConfig Get(int key) => _dataMap[key];
        public ItemConfig this[int key] => _dataMap[key];

        public override void Resolve(Dictionary<string, IConfigSingleton> _tables)
        {
            foreach(var v in _dataList)
            {
                v.Resolve(_tables);
            }
            PostResolve();
        }

        public override void TranslateText(System.Func<string, string, string> translator)
        {
            foreach(var v in _dataList)
            {
                v.TranslateText(translator);
            }
        }
        
        partial void PostInit();
        partial void PostResolve();
    }
}